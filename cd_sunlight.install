<?php
// $Id$

/**
 * @file
 * Install/Updates for cd_sunlight.
 */

/**
 * Implementation of hook_schema().
 */
function cd_sunlight_schema() {
  $schema['cd_sunlight_cron'] = array(
    'description' => t('Contains contact_ids that will be sent for CD Lookup on the next cron run.'),
    'fields' => array(
      'cd_sunlight_cron_id' => array(
        'description' => t('Autoincrementing primary key.'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'storage_system' => array(
        'description' => t('Contact storage system.'),
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'contact_id' => array(
        'description' => t('Contact ID.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
     'request_uri' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
     'backtrace' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'description' => 'Optional backtrace. Only stored when debugging mode is enabled.',
      ),
     'insert_time' => array(
        'description' => t('When this row was inserted.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'processed' => array(
        'description' => t('0 when the contact is first queued, set to 1 when dequeued.'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('cd_sunlight_cron_id'),
    'indexes' => array(
      'cd_sunlight_cron_contact_id_processed_idx' => array('contact_id', 'processed'),
    ),
  );

  $schema['cd_sunlight_legislators'] = array(
    'description' => t('The current members of Congress as returned by the Sunlight API.'),
    'fields' => array(
      'legislator_id' => array(
        'description' => t('Autoincrementing primary key.'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'last_update_time' => array(
        'description' => t('When this row was last updated.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'firstname' => array(
        'type' => 'varchar',
        'length' => '64',
        'not null' => FALSE,
      ),
      'middlename' => array(
        'type' => 'varchar',
        'length' => '64',
        'not null' => FALSE,
      ),
      'lastname' => array(
        'type' => 'varchar',
        'length' => '64',
        'not null' => FALSE,
      ),
      'name_suffix' => array(
        'type' => 'varchar',
        'length' => '8',
        'not null' => FALSE,
      ),
      'nickname' => array(
        'type' => 'varchar',
        'length' => '64',
        'not null' => FALSE,
      ),
      'title' => array(
        'description' => t('Either "Sen" or "Rep"'),
        'type' => 'varchar',
        'length' => '3',
        'not null' => FALSE,
      ),
      'party' => array(
        'description' => t('Either D, R, or I'),
        'type' => 'varchar',
        'length' => '1',
        'not null' => FALSE,
      ),
      'state' => array(
        'type' => 'varchar',
        'length' => '2',
        'not null' => TRUE,
        'default' => '__',
      ),
      'district' => array(
        'description' => t('Only for Reps.  The CD that they legislate.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => FALSE,
      ),
      'in_office' => array(
        'description' => t('Is the legislator current.  Always 1 for our purposes.'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
      'gender' => array(
        'type' => 'varchar',
        'length' => '1',
        'not null' => FALSE,
      ),
      'phone' => array(
        'type' => 'varchar',
        'length' => '32',
        'not null' => FALSE,
      ),
      'fax' => array(
        'type' => 'varchar',
        'length' => '32',
        'not null' => FALSE,
      ),
      'website' => array(
        'type' => 'varchar',
        'length' => '64',
        'not null' => FALSE,
      ),
      'webform' => array(
        'type' => 'varchar',
        'length' => '64',
        'not null' => FALSE,
      ),
      'email' => array(
        'type' => 'varchar',
        'length' => '64',
        'not null' => FALSE,
      ),
      'congress_office' => array(
        'type' => 'varchar',
        'length' => '256',
        'not null' => FALSE,
      ),
      'bioguide_id' => array(
        'description' => t('http://bioguide.congress.gov/'),
        'type' => 'varchar',
        'length' => '16',
        'not null' => FALSE,
      ),
      'votesmart_id' => array(
        'description' => t('http://votesmart.org/'),
        'type' => 'varchar',
        'length' => '16',
        'not null' => FALSE,
      ),
      'fec_id' => array(
        'description' => t('TODO'),
        'type' => 'varchar',
        'length' => '16',
        'not null' => FALSE,
      ),
      'govtrack_id' => array(
        'description' => t('http://govtrack.us/'),
        'type' => 'varchar',
        'length' => '16',
        'not null' => FALSE,
      ),
      'crp_id' => array(
        'description' => t('http://www.opensecrets.org/'),
        'type' => 'varchar',
        'length' => '16',
        'not null' => FALSE,
      ),
      'eventful_id' => array(
        'description' => t('DEPRICATED'),
        'type' => 'varchar',
        'length' => '32',
        'not null' => FALSE,
      ),
      'congresspedia_url' => array(
        'description' => t('http://www.opencongress.org/'),
        'type' => 'varchar',
        'length' => '64',
        'not null' => FALSE,
      ),
      'twitter_id' => array(
        'description' => t('http://twitter.com/'),
        'type' => 'varchar',
        'length' => '16',
        'not null' => FALSE,
      ),
      'youtube_url' => array(
        'description' => t('http://youtube.com/'),
        'type' => 'varchar',
        'length' => '64',
        'not null' => FALSE,
      ),
      'senate_class' => array(
        'description' => t("For senators I, II, or III depending on the Senator's election term."),
        'type' => 'varchar',
        'length' => '3',
        'not null' => TRUE,
        'default' => ''
      ),
      'birthdate' => array(
        'description' => t("YYYY-MM-DD formatted birth date."),
        'type' => 'datetime',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('legislator_id'),
    'indexes' => array(
      'cd_sunlight_legislators_party_idx' => array('party'),
      'cd_sunlight_legislators_state_district_idx' => array('state', 'district'),
      'cd_sunlight_legislators_title_idx' => array('title'),
      'cd_sunlight_legislators_gender_idx' => array('gender'),
    ),
  );

  return $schema;
}


/**
 * Implementation of hook_requriements().
 */
function cd_sunlight_requirements($phase) {
  global $db_prefix;
  $requirements = array();
  if ($phase == 'runtime') {

    // Raise an error if a the module has not been setup.
    if (!variable_get('cd_sunlight_api_key', '')) {
      $requirements['cd_sunlight_setup'] = array(
        'title' => 'CiviCRM Sunlight Congressional District',
        'description' => t('You have not <a href="!url">configured</a> the module.'
          , array('!url' => url('admin/settings/cd_sunlight'))),
        'severity' => REQUIREMENT_ERROR,
        'value' => t('Not configured'),
      );
    }

    // Report the number of lookups ever performed.
    $requirements['cd_sunlight_total_lookups'] = array(
      'title' => 'CiviCRM Sunlight Congressional District lookups',
      'value' => t('A total of !count lookups to Sunlight have been performed.',
        array('!count' => number_format(variable_get('cd_sunlight_total_lookups', 0)))),
      'severity' => REQUIREMENT_INFO
    );

    // Report the number of records in the lookup queue.
    $count = db_result(db_query('SELECT COUNT(*) FROM {cd_sunlight_cron} WHERE processed = 0'));
    $requirements['cd_sunlight_count'] = array(
      'title' => 'CiviCRM Sunlight Congressional District queue',
      'value' => t('There are !count contacts in the queue for a CD lookup.',
        array('!count' => $count)),
      'count' => $count,
      'severity' => REQUIREMENT_INFO
    );

    // Report the number of records in the batch geocoding queue.
    if (variable_get('cd_sunlight_geocoding_off', FALSE) && db_table_exists('civicrm_address')) {
      $count = db_result(db_query('SELECT COUNT(*) FROM {civicrm_address}
        WHERE geo_code_1 IS NULL
          AND country_id IS NOT NULL
          AND state_province_id IS NOT NULL'));
      $requirements['cd_sunlight_geocode_count'] = array(
        'title' => 'CiviCRM Contact GeoCoding',
        'value' => t('There are !count contacts in the queue to be geocoded.',
          array('!count' => $count)),
        'count' => $count,
        'severity' => REQUIREMENT_INFO
      );
    }

    // Report an error if there are no legislators (cron needs to be run).
    if (!_cd_sunlight_legislators_exist()) {
      $requirements['cd_sunlight_legislators_exist'] = array(
        'title' => 'Members of Congress',
        'value' => 'Do not exist',
        'description' => t('Run cron to retrieve members of Congress from Sunlight.'),
        'severity' => REQUIREMENT_ERROR,
      );
    }

  }
  return $requirements;
}

/**
 * Implementation of hook_install().
 *
 * @return none
 */
function cd_sunlight_install() {
  // Create tables.
  drupal_install_schema('cd_sunlight');
}

/**
 * Implementation of hook_uninstall().
 *
 * @return none
 */
function cd_sunlight_uninstall() {
  // Remove tables.
  drupal_uninstall_schema('cd_sunlight');

  // Remove variables.
  variable_del('cd_sunlight_api_key');
  variable_del('cd_sunlight_cron_load_limit');
  variable_del('cd_sunlight_geocoding_off');
  variable_del('cd_sunlight_geocode_username');
  variable_del('cd_sunlight_http_auth_user');
  variable_del('cd_sunlight_http_auth_password');
  variable_del('cd_sunlight_api_key');
  variable_del('cd_sunlight_cron_contact_limit');
  variable_del('cd_sunlight_total_lookups');
  variable_del('cd_sunlight_civicrm_cd');
  variable_del('cd_sunlight_civicrm_cd_override');
  variable_del('cd_sunlight_crypt_iv');
}

/**
 * Removed.
 */
function cd_sunlight_update_4() {
  $ret = array();
  return $ret;
}

/**
 * Change our cron table to the new and improved version with more detailed logging.
 */
function cd_sunlight_update_6001() {
  $ret = array();

  // First get all the existing contact_ids.
  $res = db_query('SELECT contact_id FROM {cd_sunlight_cron}');
  $contact_ids = array();
  while ($row = db_fetch_object($res)) {
    $contact_ids[] = $row->contact_id;
  }

  // Drop the old table.
  db_drop_table($ret, 'cd_sunlight_cron');

  // Recreate the table.
  $table = array(
    'description' => t('Contains contact_ids that will be sent for CD Lookup on the next cron run.'),
    'fields' => array(
      'cd_sunlight_cron_id' => array(
        'description' => t('Autoincrementing primary key.'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'contact_id' => array(
        'description' => t('CiviCRM Contact ID.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
     'request_uri' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
     'backtrace' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'description' => 'Optional backtrace. Only stored when debugging mode is enabled.',
      ),
     'insert_time' => array(
        'description' => t('When this row was inserted.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'processed' => array(
        'description' => t('0 when the contact is first queued, set to 1 when dequeued.'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('cd_sunlight_cron_id'),
    'indexes' => array(
      'cd_sunlight_cron_contact_id_processed_idx' => array('contact_id', 'processed'),
    ),
  );
  db_create_table($ret, 'cd_sunlight_cron', $table);

  // Requeue the contact_ids from the old table.
  foreach ($contact_ids as $contact_id) {
    cd_sunlight_contact_enqueue($contact_id);
  }

  return $ret;
}

/**
 * Update our schema with the new fields that Sunlight provides: senate_class and birthdate.
 */
function cd_sunlight_update_6002() {
  $return = array();
  $senate_class = array(
    'description' => t("For senators I, II, or III depending on the Senator's election term."),
    'type' => 'varchar',
    'length' => '3',
    'not null' => TRUE,
    'default' => ''
  );
  db_add_field($return, 'cd_sunlight_legislators', 'senate_class', $senate_class);
  $birthdate = array(
    'description' => t("YYYY-MM-DD formatted birth date."),
    'type' => 'datetime',
    'not null' => FALSE,
  );
  db_add_field($return, 'cd_sunlight_legislators', 'birthdate', $birthdate);
  return $return;
}

/**
 * Upgrade path for splitting the module.
 */
function cd_sunlight_update_6003() {
  $return = array();

  // Enable module.
  module_rebuild_cache();
  drupal_install_modules(array('cd_civicrm'));
  $return[] = array('success' => TRUE, 'query' => 'Enabled CD CiviCRM module.');

  // Add new field.
  $storage_system = array(
    'description' => t('Contact storage system.'),
    'type' => 'varchar',
    'length' => 64,
    'not null' => TRUE,
    'default' => '',
  );
  db_add_field($return, 'cd_sunlight_cron', 'storage_system', $storage_system);

  // Variables.
  variable_set('cd_civicrm_cd', variable_get('cd_sunlight_civicrm_cd', ''));
  variable_set('cd_civicrm_cd_override', variable_get('cd_sunlight_civicrm_cd_override', ''));
  variable_set('cd_civicrm_custom_field_cd', variable_get('cd_sunlight_civicrm_custom_field_cd', ''));
  variable_set('cd_civicrm_custom_field_cd_override', variable_get('cd_sunlight_civicrm_custom_field_cd_override', ''));
  variable_set('cd_civicrm_custom_table', variable_get('cd_sunlight_civicrm_custom_table', ''));
  variable_set('cd_civicrm_geocoding_off', variable_get('cd_sunlight_geocoding_off', ''));
  variable_set('cd_civicrm_geocode_username', variable_get('cd_sunlight_geocode_username', ''));
  variable_set('cd_civicrm_crypt_iv', variable_get('cd_sunlight_crypt_iv', ''));
  variable_del('cd_sunlight_civicrm_cd');
  variable_del('cd_sunlight_civicrm_cd_override');
  variable_del('cd_sunlight_civicrm_custom_field_cd');
  variable_del('cd_sunlight_civicrm_custom_field_cd_override');
  variable_del('cd_sunlight_civicrm_custom_table');
  variable_del('cd_sunlight_geocoding_off');
  variable_del('cd_civicrm_geocode_username');
  variable_del('cd_sunlight_crypt_iv');

  // Check for batch geocoding.
  if (defined('CD_SUNLIGHT_GEOCODE_PASSWORD')) {
    $return[] = array(
      'success' => FALSE,
      'query' => 'The CD_SUNLIGHT_GEOCODE_PASSWORD in settings.php must be renamed to CD_CIVICRM_GEOCODE_PASSWORD.'
    );
  }

  // Check for geocoding user.
  if (variable_get('cd_civicrm_geocode_username', '')) {
    $return[] = array(
      'success' => FALSE,
      'query' => 'You must re set the geocode username as the encryption logic has changed.'
    );
  }

  cache_clear_all('*', 'cache', TRUE);
  cache_clear_all('*', 'cache_views', TRUE);
  cache_clear_all('*', 'cache_menu', TRUE);

  return $return;
}
